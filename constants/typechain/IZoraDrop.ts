/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers'
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi'
import type { Listener, Provider } from '@ethersproject/providers'
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from './common'

export declare namespace IZoraDrop {
  export type AddressMintDetailsStruct = {
    totalMints: BigNumberish
    presaleMints: BigNumberish
    publicMints: BigNumberish
  }

  export type AddressMintDetailsStructOutput = [BigNumber, BigNumber, BigNumber] & {
    totalMints: BigNumber
    presaleMints: BigNumber
    publicMints: BigNumber
  }

  export type SaleDetailsStruct = {
    presaleActive: boolean
    publicSaleActive: boolean
    publicSaleStart: BigNumberish
    publicSaleEnd: BigNumberish
    publicSalePrice: BigNumberish
    presaleStart: BigNumberish
    presaleEnd: BigNumberish
    presaleMerkleRoot: BytesLike
    maxSalePurchasePerAddress: BigNumberish
    totalMinted: BigNumberish
    maxSupply: BigNumberish
  }

  export type SaleDetailsStructOutput = [
    boolean,
    boolean,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    presaleActive: boolean
    publicSaleActive: boolean
    publicSaleStart: BigNumber
    publicSaleEnd: BigNumber
    publicSalePrice: BigNumber
    presaleStart: BigNumber
    presaleEnd: BigNumber
    presaleMerkleRoot: string
    maxSalePurchasePerAddress: BigNumber
    totalMinted: BigNumber
    maxSupply: BigNumber
  }
}

export interface IZoraDropInterface extends utils.Interface {
  functions: {
    'adminMint(address,uint256)': FunctionFragment
    'adminMintAirdrop(address[])': FunctionFragment
    'mintedPerAddress(address)': FunctionFragment
    'owner()': FunctionFragment
    'purchase(uint256)': FunctionFragment
    'purchasePresale(uint256,uint256,uint256,bytes32[])': FunctionFragment
    'saleDetails()': FunctionFragment
  }

  getFunction(
    nameOrSignatureOrTopic:
      | 'adminMint'
      | 'adminMintAirdrop'
      | 'mintedPerAddress'
      | 'owner'
      | 'purchase'
      | 'purchasePresale'
      | 'saleDetails'
  ): FunctionFragment

  encodeFunctionData(
    functionFragment: 'adminMint',
    values: [string, BigNumberish]
  ): string
  encodeFunctionData(functionFragment: 'adminMintAirdrop', values: [string[]]): string
  encodeFunctionData(functionFragment: 'mintedPerAddress', values: [string]): string
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string
  encodeFunctionData(functionFragment: 'purchase', values: [BigNumberish]): string
  encodeFunctionData(
    functionFragment: 'purchasePresale',
    values: [BigNumberish, BigNumberish, BigNumberish, BytesLike[]]
  ): string
  encodeFunctionData(functionFragment: 'saleDetails', values?: undefined): string

  decodeFunctionResult(functionFragment: 'adminMint', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'adminMintAirdrop', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'mintedPerAddress', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'purchase', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'purchasePresale', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'saleDetails', data: BytesLike): Result

  events: {
    'Sale(address,uint256,uint256,uint256)': EventFragment
  }

  getEvent(nameOrSignatureOrTopic: 'Sale'): EventFragment
}

export interface SaleEventObject {
  to: string
  quantity: BigNumber
  pricePerToken: BigNumber
  firstPurchasedTokenId: BigNumber
}
export type SaleEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  SaleEventObject
>

export type SaleEventFilter = TypedEventFilter<SaleEvent>

export interface IZoraDrop extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  interface: IZoraDropInterface

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>
  listeners(eventName?: string): Array<Listener>
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this
  removeAllListeners(eventName?: string): this
  off: OnEvent<this>
  on: OnEvent<this>
  once: OnEvent<this>
  removeListener: OnEvent<this>

  functions: {
    adminMint(
      to: string,
      quantity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    adminMintAirdrop(
      to: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    mintedPerAddress(
      minter: string,
      overrides?: CallOverrides
    ): Promise<[IZoraDrop.AddressMintDetailsStructOutput]>

    owner(overrides?: CallOverrides): Promise<[string]>

    purchase(
      quantity: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    purchasePresale(
      quantity: BigNumberish,
      maxQuantity: BigNumberish,
      pricePerToken: BigNumberish,
      merkleProof: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    saleDetails(overrides?: CallOverrides): Promise<[IZoraDrop.SaleDetailsStructOutput]>
  }

  adminMint(
    to: string,
    quantity: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  adminMintAirdrop(
    to: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  mintedPerAddress(
    minter: string,
    overrides?: CallOverrides
  ): Promise<IZoraDrop.AddressMintDetailsStructOutput>

  owner(overrides?: CallOverrides): Promise<string>

  purchase(
    quantity: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  purchasePresale(
    quantity: BigNumberish,
    maxQuantity: BigNumberish,
    pricePerToken: BigNumberish,
    merkleProof: BytesLike[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  saleDetails(overrides?: CallOverrides): Promise<IZoraDrop.SaleDetailsStructOutput>

  callStatic: {
    adminMint(
      to: string,
      quantity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    adminMintAirdrop(to: string[], overrides?: CallOverrides): Promise<BigNumber>

    mintedPerAddress(
      minter: string,
      overrides?: CallOverrides
    ): Promise<IZoraDrop.AddressMintDetailsStructOutput>

    owner(overrides?: CallOverrides): Promise<string>

    purchase(quantity: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    purchasePresale(
      quantity: BigNumberish,
      maxQuantity: BigNumberish,
      pricePerToken: BigNumberish,
      merkleProof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>

    saleDetails(overrides?: CallOverrides): Promise<IZoraDrop.SaleDetailsStructOutput>
  }

  filters: {
    'Sale(address,uint256,uint256,uint256)'(
      to?: string | null,
      quantity?: BigNumberish | null,
      pricePerToken?: BigNumberish | null,
      firstPurchasedTokenId?: null
    ): SaleEventFilter
    Sale(
      to?: string | null,
      quantity?: BigNumberish | null,
      pricePerToken?: BigNumberish | null,
      firstPurchasedTokenId?: null
    ): SaleEventFilter
  }

  estimateGas: {
    adminMint(
      to: string,
      quantity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    adminMintAirdrop(
      to: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    mintedPerAddress(minter: string, overrides?: CallOverrides): Promise<BigNumber>

    owner(overrides?: CallOverrides): Promise<BigNumber>

    purchase(
      quantity: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    purchasePresale(
      quantity: BigNumberish,
      maxQuantity: BigNumberish,
      pricePerToken: BigNumberish,
      merkleProof: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    saleDetails(overrides?: CallOverrides): Promise<BigNumber>
  }

  populateTransaction: {
    adminMint(
      to: string,
      quantity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    adminMintAirdrop(
      to: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    mintedPerAddress(
      minter: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>

    purchase(
      quantity: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    purchasePresale(
      quantity: BigNumberish,
      maxQuantity: BigNumberish,
      pricePerToken: BigNumberish,
      merkleProof: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    saleDetails(overrides?: CallOverrides): Promise<PopulatedTransaction>
  }
}
