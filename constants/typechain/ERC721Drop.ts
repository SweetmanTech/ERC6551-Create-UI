/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers'
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi'
import type { Listener, Provider } from '@ethersproject/providers'
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from './common'

export declare namespace IERC721Drop {
  export type SalesConfigurationStruct = {
    publicSalePrice: BigNumberish
    maxSalePurchasePerAddress: BigNumberish
    publicSaleStart: BigNumberish
    publicSaleEnd: BigNumberish
    presaleStart: BigNumberish
    presaleEnd: BigNumberish
    presaleMerkleRoot: BytesLike
  }

  export type SalesConfigurationStructOutput = [
    BigNumber,
    number,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string
  ] & {
    publicSalePrice: BigNumber
    maxSalePurchasePerAddress: number
    publicSaleStart: BigNumber
    publicSaleEnd: BigNumber
    presaleStart: BigNumber
    presaleEnd: BigNumber
    presaleMerkleRoot: string
  }

  export type AddressMintDetailsStruct = {
    totalMints: BigNumberish
    presaleMints: BigNumberish
    publicMints: BigNumberish
  }

  export type AddressMintDetailsStructOutput = [BigNumber, BigNumber, BigNumber] & {
    totalMints: BigNumber
    presaleMints: BigNumber
    publicMints: BigNumber
  }

  export type SaleDetailsStruct = {
    publicSaleActive: boolean
    presaleActive: boolean
    publicSalePrice: BigNumberish
    publicSaleStart: BigNumberish
    publicSaleEnd: BigNumberish
    presaleStart: BigNumberish
    presaleEnd: BigNumberish
    presaleMerkleRoot: BytesLike
    maxSalePurchasePerAddress: BigNumberish
    totalMinted: BigNumberish
    maxSupply: BigNumberish
  }

  export type SaleDetailsStructOutput = [
    boolean,
    boolean,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    publicSaleActive: boolean
    presaleActive: boolean
    publicSalePrice: BigNumber
    publicSaleStart: BigNumber
    publicSaleEnd: BigNumber
    presaleStart: BigNumber
    presaleEnd: BigNumber
    presaleMerkleRoot: string
    maxSalePurchasePerAddress: BigNumber
    totalMinted: BigNumber
    maxSupply: BigNumber
  }
}

export interface ERC721DropInterface extends utils.Interface {
  functions: {
    'DEFAULT_ADMIN_ROLE()': FunctionFragment
    'MINTER_ROLE()': FunctionFragment
    'SALES_MANAGER_ROLE()': FunctionFragment
    'adminMint(address,uint256)': FunctionFragment
    'adminMintAirdrop(address[])': FunctionFragment
    'approve(address,uint256)': FunctionFragment
    'balanceOf(address)': FunctionFragment
    'burn(uint256)': FunctionFragment
    'config()': FunctionFragment
    'contractURI()': FunctionFragment
    'contractVersion()': FunctionFragment
    'finalizeOpenEdition()': FunctionFragment
    'getApproved(uint256)': FunctionFragment
    'getRoleAdmin(bytes32)': FunctionFragment
    'grantRole(bytes32,address)': FunctionFragment
    'hasRole(bytes32,address)': FunctionFragment
    'initialize(string,string,address,address,uint64,uint16,(uint104,uint32,uint64,uint64,uint64,uint64,bytes32),address,bytes)': FunctionFragment
    'isAdmin(address)': FunctionFragment
    'isApprovedForAll(address,address)': FunctionFragment
    'metadataRenderer()': FunctionFragment
    'mintedPerAddress(address)': FunctionFragment
    'name()': FunctionFragment
    'owner()': FunctionFragment
    'ownerOf(uint256)': FunctionFragment
    'presaleMintsByAddress(address)': FunctionFragment
    'proxiableUUID()': FunctionFragment
    'purchase(uint256)': FunctionFragment
    'purchasePresale(uint256,uint256,uint256,bytes32[])': FunctionFragment
    'renounceRole(bytes32,address)': FunctionFragment
    'revokeRole(bytes32,address)': FunctionFragment
    'royaltyInfo(uint256,uint256)': FunctionFragment
    'safeTransferFrom(address,address,uint256)': FunctionFragment
    'safeTransferFrom(address,address,uint256,bytes)': FunctionFragment
    'saleDetails()': FunctionFragment
    'salesConfig()': FunctionFragment
    'setApprovalForAll(address,bool)': FunctionFragment
    'setFundsRecipient(address)': FunctionFragment
    'setOwner(address)': FunctionFragment
    'setSaleConfiguration(uint104,uint32,uint64,uint64,uint64,uint64,bytes32)': FunctionFragment
    'supportsInterface(bytes4)': FunctionFragment
    'symbol()': FunctionFragment
    'tokenURI(uint256)': FunctionFragment
    'totalSupply()': FunctionFragment
    'transferFrom(address,address,uint256)': FunctionFragment
    'upgradeTo(address)': FunctionFragment
    'upgradeToAndCall(address,bytes)': FunctionFragment
    'withdraw()': FunctionFragment
    'zoraFeeForAmount(uint256)': FunctionFragment
    'zoraFeeManager()': FunctionFragment
  }

  getFunction(
    nameOrSignatureOrTopic:
      | 'DEFAULT_ADMIN_ROLE'
      | 'MINTER_ROLE'
      | 'SALES_MANAGER_ROLE'
      | 'adminMint'
      | 'adminMintAirdrop'
      | 'approve'
      | 'balanceOf'
      | 'burn'
      | 'config'
      | 'contractURI'
      | 'contractVersion'
      | 'finalizeOpenEdition'
      | 'getApproved'
      | 'getRoleAdmin'
      | 'grantRole'
      | 'hasRole'
      | 'initialize'
      | 'isAdmin'
      | 'isApprovedForAll'
      | 'metadataRenderer'
      | 'mintedPerAddress'
      | 'name'
      | 'owner'
      | 'ownerOf'
      | 'presaleMintsByAddress'
      | 'proxiableUUID'
      | 'purchase'
      | 'purchasePresale'
      | 'renounceRole'
      | 'revokeRole'
      | 'royaltyInfo'
      | 'safeTransferFrom(address,address,uint256)'
      | 'safeTransferFrom(address,address,uint256,bytes)'
      | 'saleDetails'
      | 'salesConfig'
      | 'setApprovalForAll'
      | 'setFundsRecipient'
      | 'setOwner'
      | 'setSaleConfiguration'
      | 'supportsInterface'
      | 'symbol'
      | 'tokenURI'
      | 'totalSupply'
      | 'transferFrom'
      | 'upgradeTo'
      | 'upgradeToAndCall'
      | 'withdraw'
      | 'zoraFeeForAmount'
      | 'zoraFeeManager'
  ): FunctionFragment

  encodeFunctionData(functionFragment: 'DEFAULT_ADMIN_ROLE', values?: undefined): string
  encodeFunctionData(functionFragment: 'MINTER_ROLE', values?: undefined): string
  encodeFunctionData(functionFragment: 'SALES_MANAGER_ROLE', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'adminMint',
    values: [string, BigNumberish]
  ): string
  encodeFunctionData(functionFragment: 'adminMintAirdrop', values: [string[]]): string
  encodeFunctionData(functionFragment: 'approve', values: [string, BigNumberish]): string
  encodeFunctionData(functionFragment: 'balanceOf', values: [string]): string
  encodeFunctionData(functionFragment: 'burn', values: [BigNumberish]): string
  encodeFunctionData(functionFragment: 'config', values?: undefined): string
  encodeFunctionData(functionFragment: 'contractURI', values?: undefined): string
  encodeFunctionData(functionFragment: 'contractVersion', values?: undefined): string
  encodeFunctionData(functionFragment: 'finalizeOpenEdition', values?: undefined): string
  encodeFunctionData(functionFragment: 'getApproved', values: [BigNumberish]): string
  encodeFunctionData(functionFragment: 'getRoleAdmin', values: [BytesLike]): string
  encodeFunctionData(functionFragment: 'grantRole', values: [BytesLike, string]): string
  encodeFunctionData(functionFragment: 'hasRole', values: [BytesLike, string]): string
  encodeFunctionData(
    functionFragment: 'initialize',
    values: [
      string,
      string,
      string,
      string,
      BigNumberish,
      BigNumberish,
      IERC721Drop.SalesConfigurationStruct,
      string,
      BytesLike
    ]
  ): string
  encodeFunctionData(functionFragment: 'isAdmin', values: [string]): string
  encodeFunctionData(
    functionFragment: 'isApprovedForAll',
    values: [string, string]
  ): string
  encodeFunctionData(functionFragment: 'metadataRenderer', values?: undefined): string
  encodeFunctionData(functionFragment: 'mintedPerAddress', values: [string]): string
  encodeFunctionData(functionFragment: 'name', values?: undefined): string
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string
  encodeFunctionData(functionFragment: 'ownerOf', values: [BigNumberish]): string
  encodeFunctionData(functionFragment: 'presaleMintsByAddress', values: [string]): string
  encodeFunctionData(functionFragment: 'proxiableUUID', values?: undefined): string
  encodeFunctionData(functionFragment: 'purchase', values: [BigNumberish]): string
  encodeFunctionData(
    functionFragment: 'purchasePresale',
    values: [BigNumberish, BigNumberish, BigNumberish, BytesLike[]]
  ): string
  encodeFunctionData(
    functionFragment: 'renounceRole',
    values: [BytesLike, string]
  ): string
  encodeFunctionData(functionFragment: 'revokeRole', values: [BytesLike, string]): string
  encodeFunctionData(
    functionFragment: 'royaltyInfo',
    values: [BigNumberish, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'safeTransferFrom(address,address,uint256)',
    values: [string, string, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'safeTransferFrom(address,address,uint256,bytes)',
    values: [string, string, BigNumberish, BytesLike]
  ): string
  encodeFunctionData(functionFragment: 'saleDetails', values?: undefined): string
  encodeFunctionData(functionFragment: 'salesConfig', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'setApprovalForAll',
    values: [string, boolean]
  ): string
  encodeFunctionData(functionFragment: 'setFundsRecipient', values: [string]): string
  encodeFunctionData(functionFragment: 'setOwner', values: [string]): string
  encodeFunctionData(
    functionFragment: 'setSaleConfiguration',
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike
    ]
  ): string
  encodeFunctionData(functionFragment: 'supportsInterface', values: [BytesLike]): string
  encodeFunctionData(functionFragment: 'symbol', values?: undefined): string
  encodeFunctionData(functionFragment: 'tokenURI', values: [BigNumberish]): string
  encodeFunctionData(functionFragment: 'totalSupply', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'transferFrom',
    values: [string, string, BigNumberish]
  ): string
  encodeFunctionData(functionFragment: 'upgradeTo', values: [string]): string
  encodeFunctionData(
    functionFragment: 'upgradeToAndCall',
    values: [string, BytesLike]
  ): string
  encodeFunctionData(functionFragment: 'withdraw', values?: undefined): string
  encodeFunctionData(functionFragment: 'zoraFeeForAmount', values: [BigNumberish]): string
  encodeFunctionData(functionFragment: 'zoraFeeManager', values?: undefined): string

  decodeFunctionResult(functionFragment: 'DEFAULT_ADMIN_ROLE', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'MINTER_ROLE', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'SALES_MANAGER_ROLE', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'adminMint', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'adminMintAirdrop', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'approve', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'burn', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'config', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'contractURI', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'contractVersion', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'finalizeOpenEdition', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getApproved', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getRoleAdmin', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'grantRole', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'hasRole', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'isAdmin', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'isApprovedForAll', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'metadataRenderer', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'mintedPerAddress', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'name', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'ownerOf', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'presaleMintsByAddress', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'proxiableUUID', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'purchase', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'purchasePresale', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'renounceRole', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'revokeRole', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'royaltyInfo', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'safeTransferFrom(address,address,uint256)',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'safeTransferFrom(address,address,uint256,bytes)',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'saleDetails', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'salesConfig', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'setApprovalForAll', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'setFundsRecipient', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'setOwner', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'setSaleConfiguration', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'supportsInterface', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'symbol', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'tokenURI', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'totalSupply', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'transferFrom', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'upgradeTo', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'upgradeToAndCall', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'zoraFeeForAmount', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'zoraFeeManager', data: BytesLike): Result

  events: {
    'AdminChanged(address,address)': EventFragment
    'Approval(address,address,uint256)': EventFragment
    'ApprovalForAll(address,address,bool)': EventFragment
    'BeaconUpgraded(address)': EventFragment
    'FundsRecipientChanged(address,address)': EventFragment
    'OpenMintFinalized(address,uint256)': EventFragment
    'OwnershipTransferred(address,address)': EventFragment
    'RoleAdminChanged(bytes32,bytes32,bytes32)': EventFragment
    'RoleGranted(bytes32,address,address)': EventFragment
    'RoleRevoked(bytes32,address,address)': EventFragment
    'Sale(address,uint256,uint256,uint256)': EventFragment
    'SalesConfigChanged(address)': EventFragment
    'Transfer(address,address,uint256)': EventFragment
    'Upgraded(address)': EventFragment
  }

  getEvent(nameOrSignatureOrTopic: 'AdminChanged'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Approval'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'ApprovalForAll'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'BeaconUpgraded'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'FundsRecipientChanged'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'OpenMintFinalized'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'RoleAdminChanged'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'RoleGranted'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'RoleRevoked'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Sale'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'SalesConfigChanged'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Transfer'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Upgraded'): EventFragment
}

export interface AdminChangedEventObject {
  previousAdmin: string
  newAdmin: string
}
export type AdminChangedEvent = TypedEvent<[string, string], AdminChangedEventObject>

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>

export interface ApprovalEventObject {
  owner: string
  approved: string
  tokenId: BigNumber
}
export type ApprovalEvent = TypedEvent<[string, string, BigNumber], ApprovalEventObject>

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>

export interface ApprovalForAllEventObject {
  owner: string
  operator: string
  approved: boolean
}
export type ApprovalForAllEvent = TypedEvent<
  [string, string, boolean],
  ApprovalForAllEventObject
>

export type ApprovalForAllEventFilter = TypedEventFilter<ApprovalForAllEvent>

export interface BeaconUpgradedEventObject {
  beacon: string
}
export type BeaconUpgradedEvent = TypedEvent<[string], BeaconUpgradedEventObject>

export type BeaconUpgradedEventFilter = TypedEventFilter<BeaconUpgradedEvent>

export interface FundsRecipientChangedEventObject {
  newAddress: string
  changedBy: string
}
export type FundsRecipientChangedEvent = TypedEvent<
  [string, string],
  FundsRecipientChangedEventObject
>

export type FundsRecipientChangedEventFilter =
  TypedEventFilter<FundsRecipientChangedEvent>

export interface OpenMintFinalizedEventObject {
  sender: string
  numberOfMints: BigNumber
}
export type OpenMintFinalizedEvent = TypedEvent<
  [string, BigNumber],
  OpenMintFinalizedEventObject
>

export type OpenMintFinalizedEventFilter = TypedEventFilter<OpenMintFinalizedEvent>

export interface OwnershipTransferredEventObject {
  previousOwner: string
  newOwner: string
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>

export interface RoleAdminChangedEventObject {
  role: string
  previousAdminRole: string
  newAdminRole: string
}
export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  RoleAdminChangedEventObject
>

export type RoleAdminChangedEventFilter = TypedEventFilter<RoleAdminChangedEvent>

export interface RoleGrantedEventObject {
  role: string
  account: string
  sender: string
}
export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  RoleGrantedEventObject
>

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>

export interface RoleRevokedEventObject {
  role: string
  account: string
  sender: string
}
export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  RoleRevokedEventObject
>

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>

export interface SaleEventObject {
  to: string
  quantity: BigNumber
  pricePerToken: BigNumber
  firstPurchasedTokenId: BigNumber
}
export type SaleEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  SaleEventObject
>

export type SaleEventFilter = TypedEventFilter<SaleEvent>

export interface SalesConfigChangedEventObject {
  changedBy: string
}
export type SalesConfigChangedEvent = TypedEvent<[string], SalesConfigChangedEventObject>

export type SalesConfigChangedEventFilter = TypedEventFilter<SalesConfigChangedEvent>

export interface TransferEventObject {
  from: string
  to: string
  tokenId: BigNumber
}
export type TransferEvent = TypedEvent<[string, string, BigNumber], TransferEventObject>

export type TransferEventFilter = TypedEventFilter<TransferEvent>

export interface UpgradedEventObject {
  implementation: string
}
export type UpgradedEvent = TypedEvent<[string], UpgradedEventObject>

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>

export interface ERC721Drop extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  interface: ERC721DropInterface

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>
  listeners(eventName?: string): Array<Listener>
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this
  removeAllListeners(eventName?: string): this
  off: OnEvent<this>
  on: OnEvent<this>
  once: OnEvent<this>
  removeListener: OnEvent<this>

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>

    MINTER_ROLE(overrides?: CallOverrides): Promise<[string]>

    SALES_MANAGER_ROLE(overrides?: CallOverrides): Promise<[string]>

    adminMint(
      recipient: string,
      quantity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    adminMintAirdrop(
      recipients: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    balanceOf(owner: string, overrides?: CallOverrides): Promise<[BigNumber]>

    burn(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    config(overrides?: CallOverrides): Promise<
      [string, BigNumber, number, string] & {
        metadataRenderer: string
        editionSize: BigNumber
        royaltyBPS: number
        fundsRecipient: string
      }
    >

    contractURI(overrides?: CallOverrides): Promise<[string]>

    contractVersion(overrides?: CallOverrides): Promise<[number]>

    finalizeOpenEdition(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    getApproved(tokenId: BigNumberish, overrides?: CallOverrides): Promise<[string]>

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>

    initialize(
      _contractName: string,
      _contractSymbol: string,
      _initialOwner: string,
      _fundsRecipient: string,
      _editionSize: BigNumberish,
      _royaltyBPS: BigNumberish,
      _salesConfig: IERC721Drop.SalesConfigurationStruct,
      _metadataRenderer: string,
      _metadataRendererInit: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    isAdmin(user: string, overrides?: CallOverrides): Promise<[boolean]>

    isApprovedForAll(
      nftOwner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>

    metadataRenderer(overrides?: CallOverrides): Promise<[string]>

    mintedPerAddress(
      minter: string,
      overrides?: CallOverrides
    ): Promise<[IERC721Drop.AddressMintDetailsStructOutput]>

    name(overrides?: CallOverrides): Promise<[string]>

    owner(overrides?: CallOverrides): Promise<[string]>

    ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<[string]>

    presaleMintsByAddress(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>

    proxiableUUID(overrides?: CallOverrides): Promise<[string]>

    purchase(
      quantity: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    purchasePresale(
      quantity: BigNumberish,
      maxQuantity: BigNumberish,
      pricePerToken: BigNumberish,
      merkleProof: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    royaltyInfo(
      arg0: BigNumberish,
      _salePrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { receiver: string; royaltyAmount: BigNumber }>

    'safeTransferFrom(address,address,uint256)'(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    'safeTransferFrom(address,address,uint256,bytes)'(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    saleDetails(overrides?: CallOverrides): Promise<[IERC721Drop.SaleDetailsStructOutput]>

    salesConfig(overrides?: CallOverrides): Promise<
      [BigNumber, number, BigNumber, BigNumber, BigNumber, BigNumber, string] & {
        publicSalePrice: BigNumber
        maxSalePurchasePerAddress: number
        publicSaleStart: BigNumber
        publicSaleEnd: BigNumber
        presaleStart: BigNumber
        presaleEnd: BigNumber
        presaleMerkleRoot: string
      }
    >

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    setFundsRecipient(
      newRecipientAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    setOwner(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    setSaleConfiguration(
      publicSalePrice: BigNumberish,
      maxSalePurchasePerAddress: BigNumberish,
      publicSaleStart: BigNumberish,
      publicSaleEnd: BigNumberish,
      presaleStart: BigNumberish,
      presaleEnd: BigNumberish,
      presaleMerkleRoot: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>

    symbol(overrides?: CallOverrides): Promise<[string]>

    tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<[string]>

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    zoraFeeForAmount(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    zoraFeeManager(overrides?: CallOverrides): Promise<[string]>
  }

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>

  MINTER_ROLE(overrides?: CallOverrides): Promise<string>

  SALES_MANAGER_ROLE(overrides?: CallOverrides): Promise<string>

  adminMint(
    recipient: string,
    quantity: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  adminMintAirdrop(
    recipients: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  approve(
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>

  burn(
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  config(overrides?: CallOverrides): Promise<
    [string, BigNumber, number, string] & {
      metadataRenderer: string
      editionSize: BigNumber
      royaltyBPS: number
      fundsRecipient: string
    }
  >

  contractURI(overrides?: CallOverrides): Promise<string>

  contractVersion(overrides?: CallOverrides): Promise<number>

  finalizeOpenEdition(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  getApproved(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  hasRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<boolean>

  initialize(
    _contractName: string,
    _contractSymbol: string,
    _initialOwner: string,
    _fundsRecipient: string,
    _editionSize: BigNumberish,
    _royaltyBPS: BigNumberish,
    _salesConfig: IERC721Drop.SalesConfigurationStruct,
    _metadataRenderer: string,
    _metadataRendererInit: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  isAdmin(user: string, overrides?: CallOverrides): Promise<boolean>

  isApprovedForAll(
    nftOwner: string,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>

  metadataRenderer(overrides?: CallOverrides): Promise<string>

  mintedPerAddress(
    minter: string,
    overrides?: CallOverrides
  ): Promise<IERC721Drop.AddressMintDetailsStructOutput>

  name(overrides?: CallOverrides): Promise<string>

  owner(overrides?: CallOverrides): Promise<string>

  ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>

  presaleMintsByAddress(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

  proxiableUUID(overrides?: CallOverrides): Promise<string>

  purchase(
    quantity: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  purchasePresale(
    quantity: BigNumberish,
    maxQuantity: BigNumberish,
    pricePerToken: BigNumberish,
    merkleProof: BytesLike[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  royaltyInfo(
    arg0: BigNumberish,
    _salePrice: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber] & { receiver: string; royaltyAmount: BigNumber }>

  'safeTransferFrom(address,address,uint256)'(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  'safeTransferFrom(address,address,uint256,bytes)'(
    from: string,
    to: string,
    tokenId: BigNumberish,
    _data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  saleDetails(overrides?: CallOverrides): Promise<IERC721Drop.SaleDetailsStructOutput>

  salesConfig(overrides?: CallOverrides): Promise<
    [BigNumber, number, BigNumber, BigNumber, BigNumber, BigNumber, string] & {
      publicSalePrice: BigNumber
      maxSalePurchasePerAddress: number
      publicSaleStart: BigNumber
      publicSaleEnd: BigNumber
      presaleStart: BigNumber
      presaleEnd: BigNumber
      presaleMerkleRoot: string
    }
  >

  setApprovalForAll(
    operator: string,
    approved: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  setFundsRecipient(
    newRecipientAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  setOwner(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  setSaleConfiguration(
    publicSalePrice: BigNumberish,
    maxSalePurchasePerAddress: BigNumberish,
    publicSaleStart: BigNumberish,
    publicSaleEnd: BigNumberish,
    presaleStart: BigNumberish,
    presaleEnd: BigNumberish,
    presaleMerkleRoot: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<boolean>

  symbol(overrides?: CallOverrides): Promise<string>

  tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>

  transferFrom(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  upgradeTo(
    newImplementation: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  upgradeToAndCall(
    newImplementation: string,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  withdraw(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  zoraFeeForAmount(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  zoraFeeManager(overrides?: CallOverrides): Promise<string>

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>

    MINTER_ROLE(overrides?: CallOverrides): Promise<string>

    SALES_MANAGER_ROLE(overrides?: CallOverrides): Promise<string>

    adminMint(
      recipient: string,
      quantity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    adminMintAirdrop(recipients: string[], overrides?: CallOverrides): Promise<BigNumber>

    approve(to: string, tokenId: BigNumberish, overrides?: CallOverrides): Promise<void>

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>

    burn(tokenId: BigNumberish, overrides?: CallOverrides): Promise<void>

    config(overrides?: CallOverrides): Promise<
      [string, BigNumber, number, string] & {
        metadataRenderer: string
        editionSize: BigNumber
        royaltyBPS: number
        fundsRecipient: string
      }
    >

    contractURI(overrides?: CallOverrides): Promise<string>

    contractVersion(overrides?: CallOverrides): Promise<number>

    finalizeOpenEdition(overrides?: CallOverrides): Promise<void>

    getApproved(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>

    grantRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<void>

    hasRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<boolean>

    initialize(
      _contractName: string,
      _contractSymbol: string,
      _initialOwner: string,
      _fundsRecipient: string,
      _editionSize: BigNumberish,
      _royaltyBPS: BigNumberish,
      _salesConfig: IERC721Drop.SalesConfigurationStruct,
      _metadataRenderer: string,
      _metadataRendererInit: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>

    isAdmin(user: string, overrides?: CallOverrides): Promise<boolean>

    isApprovedForAll(
      nftOwner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>

    metadataRenderer(overrides?: CallOverrides): Promise<string>

    mintedPerAddress(
      minter: string,
      overrides?: CallOverrides
    ): Promise<IERC721Drop.AddressMintDetailsStructOutput>

    name(overrides?: CallOverrides): Promise<string>

    owner(overrides?: CallOverrides): Promise<string>

    ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>

    presaleMintsByAddress(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

    proxiableUUID(overrides?: CallOverrides): Promise<string>

    purchase(quantity: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    purchasePresale(
      quantity: BigNumberish,
      maxQuantity: BigNumberish,
      pricePerToken: BigNumberish,
      merkleProof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>

    revokeRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<void>

    royaltyInfo(
      arg0: BigNumberish,
      _salePrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { receiver: string; royaltyAmount: BigNumber }>

    'safeTransferFrom(address,address,uint256)'(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    'safeTransferFrom(address,address,uint256,bytes)'(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>

    saleDetails(overrides?: CallOverrides): Promise<IERC721Drop.SaleDetailsStructOutput>

    salesConfig(overrides?: CallOverrides): Promise<
      [BigNumber, number, BigNumber, BigNumber, BigNumber, BigNumber, string] & {
        publicSalePrice: BigNumber
        maxSalePurchasePerAddress: number
        publicSaleStart: BigNumber
        publicSaleEnd: BigNumber
        presaleStart: BigNumber
        presaleEnd: BigNumber
        presaleMerkleRoot: string
      }
    >

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>

    setFundsRecipient(
      newRecipientAddress: string,
      overrides?: CallOverrides
    ): Promise<void>

    setOwner(newOwner: string, overrides?: CallOverrides): Promise<void>

    setSaleConfiguration(
      publicSalePrice: BigNumberish,
      maxSalePurchasePerAddress: BigNumberish,
      publicSaleStart: BigNumberish,
      publicSaleEnd: BigNumberish,
      presaleStart: BigNumberish,
      presaleEnd: BigNumberish,
      presaleMerkleRoot: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>

    supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<boolean>

    symbol(overrides?: CallOverrides): Promise<string>

    tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    upgradeTo(newImplementation: string, overrides?: CallOverrides): Promise<void>

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>

    withdraw(overrides?: CallOverrides): Promise<void>

    zoraFeeForAmount(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber]>

    zoraFeeManager(overrides?: CallOverrides): Promise<string>
  }

  filters: {
    'AdminChanged(address,address)'(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter
    AdminChanged(previousAdmin?: null, newAdmin?: null): AdminChangedEventFilter

    'Approval(address,address,uint256)'(
      owner?: string | null,
      approved?: string | null,
      tokenId?: BigNumberish | null
    ): ApprovalEventFilter
    Approval(
      owner?: string | null,
      approved?: string | null,
      tokenId?: BigNumberish | null
    ): ApprovalEventFilter

    'ApprovalForAll(address,address,bool)'(
      owner?: string | null,
      operator?: string | null,
      approved?: null
    ): ApprovalForAllEventFilter
    ApprovalForAll(
      owner?: string | null,
      operator?: string | null,
      approved?: null
    ): ApprovalForAllEventFilter

    'BeaconUpgraded(address)'(beacon?: string | null): BeaconUpgradedEventFilter
    BeaconUpgraded(beacon?: string | null): BeaconUpgradedEventFilter

    'FundsRecipientChanged(address,address)'(
      newAddress?: string | null,
      changedBy?: string | null
    ): FundsRecipientChangedEventFilter
    FundsRecipientChanged(
      newAddress?: string | null,
      changedBy?: string | null
    ): FundsRecipientChangedEventFilter

    'OpenMintFinalized(address,uint256)'(
      sender?: string | null,
      numberOfMints?: null
    ): OpenMintFinalizedEventFilter
    OpenMintFinalized(
      sender?: string | null,
      numberOfMints?: null
    ): OpenMintFinalizedEventFilter

    'OwnershipTransferred(address,address)'(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter

    'RoleAdminChanged(bytes32,bytes32,bytes32)'(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): RoleAdminChangedEventFilter
    RoleAdminChanged(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): RoleAdminChangedEventFilter

    'RoleGranted(bytes32,address,address)'(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter
    RoleGranted(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter

    'RoleRevoked(bytes32,address,address)'(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter
    RoleRevoked(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter

    'Sale(address,uint256,uint256,uint256)'(
      to?: string | null,
      quantity?: BigNumberish | null,
      pricePerToken?: BigNumberish | null,
      firstPurchasedTokenId?: null
    ): SaleEventFilter
    Sale(
      to?: string | null,
      quantity?: BigNumberish | null,
      pricePerToken?: BigNumberish | null,
      firstPurchasedTokenId?: null
    ): SaleEventFilter

    'SalesConfigChanged(address)'(
      changedBy?: string | null
    ): SalesConfigChangedEventFilter
    SalesConfigChanged(changedBy?: string | null): SalesConfigChangedEventFilter

    'Transfer(address,address,uint256)'(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null
    ): TransferEventFilter
    Transfer(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null
    ): TransferEventFilter

    'Upgraded(address)'(implementation?: string | null): UpgradedEventFilter
    Upgraded(implementation?: string | null): UpgradedEventFilter
  }

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>

    MINTER_ROLE(overrides?: CallOverrides): Promise<BigNumber>

    SALES_MANAGER_ROLE(overrides?: CallOverrides): Promise<BigNumber>

    adminMint(
      recipient: string,
      quantity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    adminMintAirdrop(
      recipients: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>

    burn(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    config(overrides?: CallOverrides): Promise<BigNumber>

    contractURI(overrides?: CallOverrides): Promise<BigNumber>

    contractVersion(overrides?: CallOverrides): Promise<BigNumber>

    finalizeOpenEdition(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    getApproved(tokenId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<BigNumber>

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    initialize(
      _contractName: string,
      _contractSymbol: string,
      _initialOwner: string,
      _fundsRecipient: string,
      _editionSize: BigNumberish,
      _royaltyBPS: BigNumberish,
      _salesConfig: IERC721Drop.SalesConfigurationStruct,
      _metadataRenderer: string,
      _metadataRendererInit: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    isAdmin(user: string, overrides?: CallOverrides): Promise<BigNumber>

    isApprovedForAll(
      nftOwner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    metadataRenderer(overrides?: CallOverrides): Promise<BigNumber>

    mintedPerAddress(minter: string, overrides?: CallOverrides): Promise<BigNumber>

    name(overrides?: CallOverrides): Promise<BigNumber>

    owner(overrides?: CallOverrides): Promise<BigNumber>

    ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    presaleMintsByAddress(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

    proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>

    purchase(
      quantity: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    purchasePresale(
      quantity: BigNumberish,
      maxQuantity: BigNumberish,
      pricePerToken: BigNumberish,
      merkleProof: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    royaltyInfo(
      arg0: BigNumberish,
      _salePrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'safeTransferFrom(address,address,uint256)'(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    'safeTransferFrom(address,address,uint256,bytes)'(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    saleDetails(overrides?: CallOverrides): Promise<BigNumber>

    salesConfig(overrides?: CallOverrides): Promise<BigNumber>

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    setFundsRecipient(
      newRecipientAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    setOwner(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    setSaleConfiguration(
      publicSalePrice: BigNumberish,
      maxSalePurchasePerAddress: BigNumberish,
      publicSaleStart: BigNumberish,
      publicSaleEnd: BigNumberish,
      presaleStart: BigNumberish,
      presaleEnd: BigNumberish,
      presaleMerkleRoot: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    symbol(overrides?: CallOverrides): Promise<BigNumber>

    tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    zoraFeeForAmount(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    zoraFeeManager(overrides?: CallOverrides): Promise<BigNumber>
  }

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>

    MINTER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>

    SALES_MANAGER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>

    adminMint(
      recipient: string,
      quantity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    adminMintAirdrop(
      recipients: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    balanceOf(owner: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    burn(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    config(overrides?: CallOverrides): Promise<PopulatedTransaction>

    contractURI(overrides?: CallOverrides): Promise<PopulatedTransaction>

    contractVersion(overrides?: CallOverrides): Promise<PopulatedTransaction>

    finalizeOpenEdition(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    initialize(
      _contractName: string,
      _contractSymbol: string,
      _initialOwner: string,
      _fundsRecipient: string,
      _editionSize: BigNumberish,
      _royaltyBPS: BigNumberish,
      _salesConfig: IERC721Drop.SalesConfigurationStruct,
      _metadataRenderer: string,
      _metadataRendererInit: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    isAdmin(user: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    isApprovedForAll(
      nftOwner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    metadataRenderer(overrides?: CallOverrides): Promise<PopulatedTransaction>

    mintedPerAddress(
      minter: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    presaleMintsByAddress(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>

    purchase(
      quantity: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    purchasePresale(
      quantity: BigNumberish,
      maxQuantity: BigNumberish,
      pricePerToken: BigNumberish,
      merkleProof: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    royaltyInfo(
      arg0: BigNumberish,
      _salePrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'safeTransferFrom(address,address,uint256)'(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    'safeTransferFrom(address,address,uint256,bytes)'(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    saleDetails(overrides?: CallOverrides): Promise<PopulatedTransaction>

    salesConfig(overrides?: CallOverrides): Promise<PopulatedTransaction>

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    setFundsRecipient(
      newRecipientAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    setOwner(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    setSaleConfiguration(
      publicSalePrice: BigNumberish,
      maxSalePurchasePerAddress: BigNumberish,
      publicSaleStart: BigNumberish,
      publicSaleEnd: BigNumberish,
      presaleStart: BigNumberish,
      presaleEnd: BigNumberish,
      presaleMerkleRoot: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    zoraFeeForAmount(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    zoraFeeManager(overrides?: CallOverrides): Promise<PopulatedTransaction>
  }
}
